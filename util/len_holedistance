#! /usr/bin/env python

# len_holedistance
# James Mithen
# Return average distance of particles from the 'holes' in the surface.
# This is done for all the particles that are labelled 'S' in the .xyz
# file.
# This only really makes sense for crystalline particles on the first
# layer.  See the utility 'len_extractlayer' which will extract the
# first layer from a .xyz file; this should usually be run first before
# using this script.  The .xyz file given as an argument to this script
# should contain only the 'top' layer of surface particles, and the
# first layer of crystal particles.

import os
import readwrite
from ffsfunctions import getpickparams
import numpy as np
import sys

# note that the first layer can either be 100 or closepacked, if
# closepacked, the holes we measure the distance from can be one of two
# choices, 1 ('fcc holes') or 2 ('hcp holes').
if len(sys.argv) != 3:
    sys.exit("Syntax coherence infile.xyz holes[1/2]")

infile = sys.argv[1]

holes = int(sys.argv[2])

try:
    params = getpickparams()
except IOError:
    sys.exit("Error: could not open file params.pkl")

# read infile
positions, symbols = readwrite.rxyz(infile,True)
npar = len(positions)

# surface atoms
spositions = np.array([positions[i] for i in range(npar)
                       if symbols[i] == 'O'])

# crystal atoms
cpositions = np.array([positions[i] for i in range(npar)
                       if symbols[i] == 'S'])
nc = len(cpositions)

# create lattice of hole positions from surface atoms
alatt = 2.0**(1.0/6.0)/(params['nlatt'])**(1.0/3.0)
if ('plane' in params) and (params['plane'] == '100'):
    maxd = alatt/2.0
    hpositions = spositions + np.array([alatt/2.0, alatt/2.0, 0.0])
else: # 111 plane
    maxd = alatt*(3.0**0.5)/2.0
    if holes == 1:
        # 1st set of holes (fcc holes)
        hpositions = spositions + np.array([alatt/2.0,
                                            alatt/(2.0*3.0**0.5),
                                            0.5*( (8.0/3.0)**0.5 * alatt)])
    elif holes == 2:
        # 2nd set of holes (hcp holes)
        hpositions = spositions + np.array([0.0, alatt/(3.0**0.5),
                                            0.5*( (8.0/3.0)**0.5 * alatt)])

# For each atom on layer, compute xy distance to nearest hole.
# This is currently a bit inefficient, we compute the distance between
# the particle and all holes.
lboxx = params['lboxx']
lboxy = params['lboxy']
xysep = np.empty([nc, 2]) # store xy distance for each particle
holedistsq = np.empty(nc)
i = 0
for cpos in cpositions:
    xydist = [0.0,0.0]
    dist = lboxx    
    for hpos in hpositions:
        sepx = cpos[0] - hpos[0]
        sepy = cpos[1] - hpos[1]        
        # periodic boundary conditions
        sepx = sepx - lboxx*np.rint(sepx/lboxx)
        sepy = sepy - lboxy*np.rint(sepy/lboxy)
        d = sepx**2 + sepy**2
        if d < dist:
            # nearest hole found so far
            dist = d
            xydist = [sepx, sepy]
    # store closest hole distances
    xysep[i] = np.array(xydist)
    holedistsq[i] = dist # stores square of distance
    i += 1

# output information
holedist = holedistsq**0.5
print "holes: %d" %holes
for d in holedist:
    print d

avstr =  ("averaged: %d\n<d>: %.3f\n<d^2>**0.5: "
          "%.3f\nmaxd: %.3f" %(nc, sum(holedist)/nc,
                               (sum(holedistsq)/nc)**0.5, maxd))
print avstr
