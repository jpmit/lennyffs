#! /usr/bin/env python

# len_bopxbulk
# James Mithen
# Return size of largest crystalline cluster in system.
# Note that the crystalline particles must already be identified in
# the .xyz file, these are the particles with symbols in XTALPARS

import sys
import os
import numpy as np
import readwrite
import orderparam
from ffsfunctions import getpickparams, getboxdims

# symbols identified as being crystal
XTALPARS = ['S', # FCC (or all TF)
            'P', # HCP
            'F', # BCC
            'B'] # ICOS

if len(sys.argv) != 2:
    sys.exit("Syntax len_bopxbulk infile.xyz")

infile = sys.argv[1]
fin = open(infile,'r')

try:
    params = getpickparams()
except IOError:
    sys.exit("Error: could not open file params.pkl")

# box dimensions: if these are written in the XYZ file, as they would
# be for an NPT simulation, we use the ones in the XYZ file to
# overwrite those in the parameters dictionary.
boxdims = getboxdims(infile)
if boxdims:
    params['lboxx'] = boxdims[0]
    params['lboxy'] = boxdims[1]
    params['lboxz'] = boxdims[2]

# read infile and keep only crystal atoms
positions, symbols = readwrite.rxyz(infile, True)
fin.close()
npar = len(positions)

# crystal atoms
cpositions = np.array([positions[i] for i in range(npar)
                       if symbols[i] in XTALPARS])

# second method of getting cluster size
ncl = len(orderparam._clusnums(cpositions, params))

print ncl
