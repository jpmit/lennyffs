#! /usr/bin/env python

# len_orientation2
# James Mithen
# Compute orientation angle on surface (alternative (new) version).
# See also len_orientation for more information.

import os
from ffsfunctions import getpickparams
import readwrite
import numpy as np
import sys

if len(sys.argv) != 2 and len(sys.argv) != 3:
    sys.exit("Syntax uniaxial infile.xyz [allownegative]")

infile = sys.argv[1]

try:
    params = getpickparams()
except IOError:
    sys.exit("Error: file params.pkl not found")

# will we allow orientation angles to be negative?
# Note, allowing is good when orientation angle is small
# but can cause problems e.g. when angle is 30 degrees
# can get misidentification due to cancelling of +30 and -30
# neighbour vectors
if (len(sys.argv) == 3) and  (sys.argv[2] == 'yes'):
    allownegative = True
else:
    allownegative = False

# read infile
positions, symbols = readwrite.rxyz(infile,True)
npar = len(positions)

# crystal atoms
cnums = [i+1 for i in range(npar) if symbols[i] == 'S']
cpositions = np.array([positions[i] for i in range(npar)
                       if symbols[i] == 'S'])
nc = len(cpositions)

lboxx = params['lboxx']
lboxy = params['lboxy']
nsep = 1.35
nsep2 = nsep**2
neightot = 0
allthetas = []

# all six 'surface' vectors
svec1 = (1.0,0.0)
svec2 = (0.5,3.0**0.5 / 2.0)
svec3 = (-0.5,3.0**0.5 / 2.0)
svec4 = (-1.0,0.0)
svec5 = (-0.5,-3.0**0.5 / 2.0)
svec6 = (0.5,-3.0**0.5 / 2.0)
# and their angles (anti-clockwise from x-axis in radians)
angles = np.array([0,60,120,180,240,300])*(np.pi / 180.0)

def getangle(normsep):
    """Get angle between vector (1.0,0.0) and normsep"""
    angle = np.arccos(normsep[0])
    if (normsep[1] >= 0.0):
        return angle
    return 2.0*np.pi - angle

# go through all pairs of neighbours, and dot separation vector with
# each surface vector in turn.

for i in range(nc):
    for j in range(i+1,nc):
        sepx = cpositions[i][0] - cpositions[j][0]
        # periodic bcs
        sepx = sepx - lboxx*np.rint(sepx/lboxx)
        if abs(sepx) < nsep:
            sepy = cpositions[i][1] - cpositions[j][1]
            # periodic bcs
            sepy = sepy - lboxy*np.rint(sepy/lboxy)
            if abs(sepy) < nsep:
                sepz = cpositions[i][2] - cpositions[j][2]
                d2 = sepx**2 + sepy**2 + sepz**2
                if d2 < nsep2:
                    neightot += 1                        
                    # dot neighbor along all six axes,
                    # which ever dot product is larger gives an angle
                    # ignore the z-separation in this calculation
                    normsep = (np.array([sepx,sepy]) /
                               (sepx**2 + sepy**2)**0.5)
                    a1dot = np.dot(normsep,svec1)
                    a2dot = np.dot(normsep,svec2)
                    a3dot = np.dot(normsep,svec3)
                    a4dot = -a1dot
                    a5dot = -a2dot
                    a6dot = -a3dot

                    # figure out which of a1dot,a2dot... is largest
                    # and use it to compute angle in radians
                    adots = [a1dot,a2dot,a3dot,a4dot,a5dot,a6dot]
                    maxvec = adots.index(max(adots))
                    theta = np.arccos(adots[maxvec])

                    if allownegative:
                        # angle theta is at this point always positive
                        # now we need to work out whether it is in fact
                        # negative.  To do this we compute angle between
                        # x-axis (svec1) and neighbour vector.
                        thetax = getangle(normsep)
                        theta = thetax - angles[maxvec]
                        # need to be careful to deal with thetas close
                        # to 2*pi!
                        if theta > np.pi :
                            theta = theta - 2*np.pi

                    allthetas.append(theta)
                        
# print orientation angle of overlayer
print np.average(allthetas)*180.0/np.pi
