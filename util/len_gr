#! /usr/bin/env python

# len_gr
# James Mithen
# Compute g(r) for a single positional configuration.  Note we are
# assuming periodic BCS here.

import sys
import numpy as np
import readwrite
from util import boxdims_xyz, getndict, getnr

if len(sys.argv) != 3:
    sys.exit("Syntax len_gr dr infile.xyz")

dr = float(sys.argv[1])
infile = sys.argv[2]
fin = open(infile,'r')

lboxx, lboxy, lboxz = boxdims_xyz(infile)
positions = readwrite.rxyz(infile, False)
npar = len(positions)

# maximum separation between any two particles
rmax = ((lboxx/2.0)**2 + (lboxy/2.0)**2 + (lboxz/2.0)**2)**0.5

# get list of r values
rvals = np.arange(0, rmax, dr)
nprval = np.zeros(len(rvals))

# we only want to actually output g(r) for r values up to lbox / 2,
# where lbox is the smallest box dimension.
indxmax = int(len(rvals)*(0.5*min(lboxx, lboxy, lboxz))/rmax)

nprval = getnr(positions, {'lboxx': lboxx, 'lboxy': lboxy,
                           'lboxz': lboxz,
                           'zperiodic': True,
                           'dr': dr,
                           'nrvals': len(rvals)})

# we'll change to proper r_eff values later...
rvalseff = rvals + 0.5*dr
volvals = (4.0/3.0)*np.pi*((rvals + dr)**3 - rvals**3)
boxvol = lboxx*lboxy*lboxz
grvals = (2.0 * boxvol / npar**2) * (nprval / volvals)

# print out file name in header
ostr = '# r, g(r) filename: {0}'.format(infile)

# note we only output up the indxmax, i.e. half the minimum box dimension
for r, gr in zip(rvalseff[:indxmax], grvals[:indxmax]):
    ostr += '\n{0:.5f} {1:.5f}'.format(r, gr)
print ostr
