#! /usr/bin/env python

# len_largestcluster
# James Mithen
# Output the largest crystalline cluster in the system.

import os
import sys

import numpy as np

import readwrite
import bops
import graph
from ffsfunctions import getpickparams, getboxdims
import orderfuncs

# symbols identified as being crystal
XTALPARS = ['S', # FCC (or all TF)
            'P', # HCP
            'F', # BCC
            'B'] # ICOS

if len(sys.argv) != 3 and len(sys.argv) != 4:
    sys.exit("Syntax len_largestcluster symbols* infile.xyz outfile")

if len(sys.argv) == 3:
    symbols_wanted = XTALPARS
    infile = sys.argv[1]
    outfile = sys.argv[2]
else:
    # consider only certain symbols for computing the largest cluster
    symbols_wanted = list(sys.argv[1])
    infile = sys.argv[2]
    outfile = sys.argv[3]

try:
    params = getpickparams()
except IOError:
    sys.exit("Error: file params.pkl not found")

# box dimensions: if these are written in the XYZ file, as they would
# be for an NPT simulation, we use the ones in the XYZ file to
# overwrite those in the parameters dictionary.
boxdims = getboxdims(infile)
# we pass boxdict to the wxyz file, so that the XYZ file for the
# cluster we are writing also has the boxdims written on it.
boxdict = {} 
if boxdims:
    params['lboxx'] = boxdims[0]
    params['lboxy'] = boxdims[1]
    params['lboxz'] = boxdims[2]
    boxdict = {'boxdims' : boxdims}

# read infile and keep only surface and crystal atoms
positions, symbols = readwrite.rxyz(infile, True)
npar = len(positions)

# surface atoms
spositions = np.array([positions[i] for i in range(npar)
                       if symbols[i] == 'O'])
ns = len(spositions)

# crystal atoms
cindexes = [i for i in range(npar) if symbols[i] in symbols_wanted]
cpositions = np.array([positions[i] for i in cindexes])
csymbols = np.array([symbols[i] for i in cindexes])

# get largest cluster C++ code
cluster = orderfuncs.clusnums(cpositions, params)
ncl = len(cluster)
clpositions = np.empty([ncl,3])
clsymbols = [None]*ncl
i = 0
for j in cluster:
    clpositions[i] = cpositions[j]
    clsymbols[i] = csymbols[i]
    i = i + 1

# write out surface and largest cluster atoms
symbols = ['O']*ns + clsymbols
if ns:
    positions = np.append(spositions, clpositions, axis=0)
else:
    # no surface atoms
    positions = clpositions
readwrite.wxyz(outfile, positions, symbols, **boxdict)
