#! /usr/bin/env python

# len_joincluster
# James Mithen
# Output the largest cluster, removing periodic boundary conditions.

from copy import deepcopy
import sys

import numpy as np

import readwrite
from ffsfunctions import getpickparams, getboxdims
import bops
import graph
import orderfuncs
from lenexceptions import UtilError

# symbols identified as being crystal
XTALPARS = ['S', # FCC (or all TF)
            'P', # HCP
            'F', # BCC
            'B'] # ICOS

if len(sys.argv) != 3:
    sys.exit("Syntax len_joincluster infile.xyz outfile")

infile = sys.argv[1]
outfile = sys.argv[2]

try:
    params = getpickparams()
except IOError:
    sys.exit("Error: file params.pkl not found")

# box dimensions: if these are written in the XYZ file, as they would
# be for an NPT simulation, we use the ones in the XYZ file to
# overwrite those in the parameters dictionary.
boxdims = getboxdims(infile)
# we pass boxdict to the wxyz file, so that the XYZ file for the
# cluster we are writing also has the boxdims written on it.
boxdict = {} 
if boxdims:
    params['lboxx'] = boxdims[0]
    params['lboxy'] = boxdims[1]
    params['lboxz'] = boxdims[2]
    boxdict = {'boxdims' : boxdims}

# save box dimensions for future use
lboxx = params['lboxx']
lboxy = params['lboxy']
lboxz = params['lboxz']

# get particle positions
positions, symbols = readwrite.rxyz(infile, True)
npar = len(positions)

# get crystal atoms
cindexes = [i for i in range(npar) if symbols[i] in XTALPARS]
cpositions = np.array([positions[i] for i in cindexes])
nc = len(cpositions)

# get surface atoms
surfpositions = np.array([positions[i] for i in range(npar)
                          if symbols[i] == 'O'])
ns = len(surfpositions)

# get largest cluster in the periodic system
cluster = orderfuncs.clusnums(cpositions, params)
ncl = len(cluster)
clpositions = np.empty([ncl,3])
i = 0
for j in cluster:
    clpositions[i] = cpositions[j]
    i = i + 1

# cluster symbols in non-periodic system
csymbols = [symbols[cindexes[j]] for j in cluster]

if params['zperiodic']:
    NREP = 27
else:
    # replicate the largest cluster a total of nine times
    NREP = 9    

allpositions = np.vstack((clpositions,)*NREP)
# middle layer
# horizontal and vertical replicas
allpositions[ncl:2*ncl,0] = allpositions[ncl:2*ncl:,0] + lboxx
allpositions[2*ncl:3*ncl,0] = allpositions[2*ncl:3*ncl,0] - lboxx
allpositions[3*ncl:4*ncl,1] = allpositions[3*ncl:4*ncl,1] + lboxy
allpositions[4*ncl:5*ncl,1] = allpositions[4*ncl:5*ncl,1] - lboxy
# diagonal replicas
allpositions[5*ncl:6*ncl,0] = allpositions[5*ncl:6*ncl,0] + lboxx
allpositions[5*ncl:6*ncl,1] = allpositions[5*ncl:6*ncl,1] + lboxy
allpositions[6*ncl:7*ncl,0] = allpositions[6*ncl:7*ncl,0] + lboxx
allpositions[6*ncl:7*ncl,1] = allpositions[6*ncl:7*ncl,1] - lboxy
allpositions[7*ncl:8*ncl,0] = allpositions[7*ncl:8*ncl,0] - lboxx
allpositions[7*ncl:8*ncl,1] = allpositions[7*ncl:8*ncl,1] + lboxy
allpositions[8*ncl:9*ncl,0] = allpositions[8*ncl:9*ncl,0] - lboxx
allpositions[8*ncl:9*ncl,1] = allpositions[8*ncl:9*ncl,1] - lboxy
if params['zperiodic']:
    # bottom layer
    # horizontal and vertical replicas
    allpositions[9*ncl:10*ncl,2] = allpositions[9*ncl:10*ncl,2] - lboxz
    allpositions[10*ncl:11*ncl,2] = allpositions[10*ncl:11*ncl,2] - lboxz    
    allpositions[10*ncl:11*ncl,0] = allpositions[10*ncl:11*ncl,0] + lboxx
    allpositions[11*ncl:12*ncl,2] = allpositions[11*ncl:12*ncl,2] - lboxz
    allpositions[11*ncl:12*ncl,0] = allpositions[11*ncl:12*ncl,0] - lboxx
    allpositions[12*ncl:13*ncl,2] = allpositions[12*ncl:13*ncl,2] - lboxz    
    allpositions[12*ncl:13*ncl,1] = allpositions[12*ncl:13*ncl,1] + lboxy
    allpositions[13*ncl:14*ncl,2] = allpositions[13*ncl:14*ncl,2] - lboxz
    allpositions[13*ncl:14*ncl,1] = allpositions[13*ncl:14*ncl,1] - lboxy
    # diagonal replicas
    allpositions[14*ncl:15*ncl,2] = allpositions[14*ncl:15*ncl,2] - lboxz    
    allpositions[14*ncl:15*ncl,0] = allpositions[14*ncl:15*ncl,0] + lboxx
    allpositions[14*ncl:15*ncl,1] = allpositions[14*ncl:15*ncl,1] + lboxy
    allpositions[15*ncl:16*ncl,2] = allpositions[15*ncl:16*ncl,2] - lboxz    
    allpositions[15*ncl:16*ncl,0] = allpositions[15*ncl:16*ncl,0] + lboxx
    allpositions[15*ncl:16*ncl,1] = allpositions[15*ncl:16*ncl,1] - lboxy
    allpositions[16*ncl:17*ncl,2] = allpositions[16*ncl:17*ncl,2] - lboxz    
    allpositions[16*ncl:17*ncl,0] = allpositions[16*ncl:17*ncl,0] - lboxx
    allpositions[16*ncl:17*ncl,1] = allpositions[16*ncl:17*ncl,1] + lboxy
    allpositions[17*ncl:18*ncl,2] = allpositions[17*ncl:18*ncl,2] - lboxz    
    allpositions[17*ncl:18*ncl,0] = allpositions[17*ncl:18*ncl,0] - lboxx
    allpositions[17*ncl:18*ncl,1] = allpositions[17*ncl:18*ncl,1] - lboxy    
    # top layer
    # horizontal and vertical replicas
    allpositions[18*ncl:19*ncl,2] = allpositions[18*ncl:19*ncl,2] + lboxz
    allpositions[19*ncl:20*ncl,2] = allpositions[19*ncl:20*ncl,2] + lboxz    
    allpositions[19*ncl:20*ncl,0] = allpositions[19*ncl:20*ncl,0] + lboxx
    allpositions[20*ncl:21*ncl,2] = allpositions[20*ncl:21*ncl,2] + lboxz
    allpositions[20*ncl:21*ncl,0] = allpositions[20*ncl:21*ncl,0] - lboxx
    allpositions[21*ncl:22*ncl,2] = allpositions[21*ncl:22*ncl,2] + lboxz    
    allpositions[21*ncl:22*ncl,1] = allpositions[21*ncl:22*ncl,1] + lboxy
    allpositions[22*ncl:23*ncl,2] = allpositions[22*ncl:23*ncl,2] + lboxz
    allpositions[22*ncl:23*ncl,1] = allpositions[22*ncl:23*ncl,1] - lboxy
    # diagonal replicas
    allpositions[23*ncl:24*ncl,2] = allpositions[23*ncl:24*ncl,2] + lboxz    
    allpositions[23*ncl:24*ncl,0] = allpositions[23*ncl:24*ncl,0] + lboxx
    allpositions[23*ncl:24*ncl,1] = allpositions[23*ncl:24*ncl,1] + lboxy
    allpositions[24*ncl:25*ncl,2] = allpositions[24*ncl:25*ncl,2] + lboxz    
    allpositions[24*ncl:25*ncl,0] = allpositions[24*ncl:25*ncl,0] + lboxx
    allpositions[24*ncl:25*ncl,1] = allpositions[24*ncl:25*ncl,1] - lboxy
    allpositions[25*ncl:26*ncl,2] = allpositions[25*ncl:26*ncl,2] + lboxz    
    allpositions[25*ncl:26*ncl,0] = allpositions[25*ncl:26*ncl,0] - lboxx
    allpositions[25*ncl:26*ncl,1] = allpositions[25*ncl:26*ncl,1] + lboxy
    allpositions[26*ncl:27*ncl,2] = allpositions[26*ncl:27*ncl,2] + lboxz    
    allpositions[26*ncl:27*ncl,0] = allpositions[26*ncl:27*ncl,0] - lboxx
    allpositions[26*ncl:27*ncl,1] = allpositions[26*ncl:27*ncl,1] - lboxy    
readwrite.wxyz('test.xyz', allpositions, csymbols*NREP)
# find the largest cluster in new system, not using periodic boundaries
params['lboxx'] = 1000000
params['lboxy'] = 1000000
params['lboxz'] = 1000000

# get largest cluster C++ code
cluster = orderfuncs.clusnums(allpositions, params)

# get symbols of particles in cluster
allsymbols = csymbols*NREP
clsymbols = [allsymbols[i] for i in cluster]

# check that the cluster size computed in periodic boundaries is same
# as without periodic boundaries, if not, then the cluster is percolating
if len(cluster) != ncl:
    raise UtilError, ('cluster percolating, real size {0}, without'
                      'boundaries {1}'.format(ncl,len(cluster)))

clpositions = np.empty([ncl,3])
i = 0
for j in cluster:
    clpositions[i] = allpositions[j]
    i = i + 1

# next, figure out which boundaries the cluster spans and add in
# surface (if we had surface in input file).
if ns > 0: # i.e. we have some surface atoms in the xyz file
    xhigh = False
    xlow = False
    yhigh = False
    ylow = False
    xhighyhigh = False
    xhighylow = False
    xlowyhigh = False
    xlowylow = False
    for j in cluster:
        if (j >= ncl and j < 2*ncl):
            xhigh = True
        elif (j >= 2*ncl and j < 3*ncl):
            xlow = True
        elif (j >= 3*ncl and j < 4*ncl):
            yhigh = True
        elif (j >= 4*ncl and j < 5*ncl):
            ylow = True
        elif (j >= 5*ncl and j < 6*ncl):
            xhighyhigh = True
        elif (j >= 6*ncl and j < 7*ncl):
            xhighylow = True
        elif (j >= 7*ncl and j < 8*ncl):
            xlowyhigh = True
        elif (j >= 8*ncl and j < 9*ncl):
            xlowylow = True

    nextra = (xlow + xhigh + ylow + yhigh + xhighyhigh + xhighylow +
              xlowyhigh + xlowylow)
    if nextra:
        surfpositions = np.vstack((surfpositions,)*(nextra+1))
        i = ns
        if xhigh:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] + lboxx
            i = i + ns
        if xlow:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] - lboxx
            i = i + ns
        if yhigh:
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] + lboxy
            i = i + ns
        if ylow:
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] - lboxy
            i = i + ns
        if xhighyhigh:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] + lboxx
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] + lboxy
            i = i + ns
        if xhighylow:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] + lboxx
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] - lboxy
            i = i + ns
        if xlowyhigh:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] - lboxx
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] + lboxy
            i = i + ns
        if xlowylow:
            surfpositions[i:i+ns,0] = surfpositions[i:i+ns,0] - lboxx
            surfpositions[i:i+ns,1] = surfpositions[i:i+ns,1] - lboxy
            i = i + ns        
        ns = len(surfpositions)

    # write out file
    allpositions = np.vstack((surfpositions,clpositions))
    readwrite.wxyz(outfile, allpositions,['O']*ns + clsymbols, **boxdict)
 # no surface atoms in the xyz file    
else:
    # write out file
    readwrite.wxyz(outfile, clpositions, clsymbols, **boxdict)
